<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://infrastructure-risk.eu/feed.xml" rel="self" type="application/atom+xml"/><link href="http://infrastructure-risk.eu/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-19T20:25:41+00:00</updated><id>http://infrastructure-risk.eu/feed.xml</id><title type="html">Infrastructure Risk &amp;amp; Resilience Group</title><entry><title type="html">An introduction to the DamageScanner</title><link href="http://infrastructure-risk.eu/blog/2015/code/" rel="alternate" type="text/html" title="An introduction to the DamageScanner"/><published>2015-07-15T15:09:00+00:00</published><updated>2015-07-15T15:09:00+00:00</updated><id>http://infrastructure-risk.eu/blog/2015/code</id><content type="html" xml:base="http://infrastructure-risk.eu/blog/2015/code/"><![CDATA[<p>A python toolkit for direct damage assessments for natural hazards. Even though the method is initially developed for flood damage assessments, it can calculate damages for any hazard for which you just require a vulnerability curve (i.e. a one-dimensional relation).</p> <h2 id="background">Background</h2> <p>This package is (loosely) based on the original DamageScanner, which calculated potential flood damages based on inundation depth and land use using depth-damage curves in the Netherlands. The DamageScanner was originally developed for the ‘Netherlands Later’ project <a href="https://www.rivm.nl/bibliotheek/digitaaldepot/WL_rapport_Overstromingsrisicos_Nederland.pdf">(Klijn et al., 2007)</a>. The original land-use classes were based on the Land-Use Scanner in order to evaluate the effect of future land-use change on flood damages.</p> <h2 id="creating-a-testing-environment">Creating a testing environment</h2> <p>Recommended option is to use a <a href="https://conda.io/miniconda.html">miniconda</a> environment to work in for this project, relying on conda to handle some of the trickier library dependencies.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c"># Add conda-forge channel for extra packages</span>
conda config <span class="nt">--add</span> channels conda-forge

<span class="c"># Create a conda environment for the project and install packages</span>
conda <span class="nb">env </span>create <span class="nt">-f</span> environment.yml
activate ds_env

</code></pre></div></div> <h2 id="installation">Installation</h2> <p><a href="https://pypi.python.org/project/damagescanner/"><img src="https://img.shields.io/pypi/v/damagescanner.svg?colorB=blue" alt="workflow pypi badge"/></a></p> <p><strong>Requirements:</strong> <a href="http://www.numpy.org/">NumPy</a>, <a href="https://pandas.pydata.org/">pandas</a>, <a href="http://geopandas.org/">geopandas</a>, <a href="https://matplotlib.org/">matplotlib</a>, <a href="https://github.com/mapbox/rasterio">rasterio</a>, <a href="https://github.com/tqdm/tqdm">tqdm</a>, <a href="https://docs.xarray.dev/en/stable/">xarray</a>, <a href="https://pyproj4.github.io/pyproj/stable/">pyproj</a></p> <ol> <li>Open the python environment in your command prompt or bash in which you want to install this package.</li> <li>Type <code class="language-plaintext highlighter-rouge">pip install damagescanner</code> and it should install itself into your python environment.</li> <li>Now you can import the package like any other package!</li> </ol> <p>OR:</p> <ol> <li>Clone the repository or download the package on your computer and extract the folder.</li> <li>Go to the DamageScanner folder in your command prompt or bash.</li> <li>Type <code class="language-plaintext highlighter-rouge">python setup.py install</code> and it should install itself into your python environment.</li> <li>Now you can import the package like any other package!</li> </ol> <h2 id="documentation">Documentation</h2> <p>Please refer to the <a href="http://damagescanner.readthedocs.io/">ReadTheDocs</a> of this project for the full documentation of all functions. <br/></p> <h2 id="running-a-raster-based-approach">Running a raster-based approach</h2> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>    <span class="kn">import</span> <span class="n">os</span>
    
    <span class="c1"># import the RasterScanner
</span>    <span class="kn">from</span> <span class="n">damagescanner.core</span> <span class="kn">import</span> <span class="n">RasterScanner</span>
    
    <span class="c1"># set paths to the data
</span>    <span class="n">inun_map</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">inundation</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">inundation_map.tif</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">landuse_map</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">landuse</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">landuse_map.tif</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">curve_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">curves</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">curves.csv</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">maxdam_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">curves</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">maxdam.csv</span><span class="sh">'</span><span class="p">)</span>
        
    <span class="c1"># run the RasterScanner and return a pandas DataFrame with loss per land-use class
</span>    <span class="n">loss_df</span> <span class="o">=</span> <span class="nc">RasterScanner</span><span class="p">(</span><span class="n">landuse_map</span><span class="p">,</span><span class="n">inun_map</span><span class="p">,</span><span class="n">curve_path</span><span class="p">,</span><span class="n">maxdam_path</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure> <p><br/></p> <h2 id="running-a-vector-based-approach">Running a vector-based approach</h2> <figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="code"><pre>    <span class="c1"># import necessary packages
</span>    <span class="kn">import</span> <span class="n">os</span>
    <span class="kn">import</span> <span class="n">numpy</span>
    <span class="kn">import</span> <span class="n">pandas</span> 
       
    <span class="c1"># import the RasterScanner
</span>    <span class="kn">from</span> <span class="n">damagescanner.core</span> <span class="kn">import</span> <span class="n">VectorScanner</span>
    
    <span class="c1"># set paths to the data
</span>    <span class="n">inun_map</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">inundation</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">inundation_map.tif</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">landuse_map</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">landuse</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">landuse.shp</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># Create maximum damage dictionary
</span>    <span class="n">maxdam</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">grass</span><span class="sh">"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">forest</span><span class="sh">"</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">orchard</span><span class="sh">"</span><span class="p">:</span><span class="mi">50</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">residential</span><span class="sh">"</span><span class="p">:</span><span class="mi">200</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">industrial</span><span class="sh">"</span><span class="p">:</span><span class="mi">300</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">retail</span><span class="sh">"</span><span class="p">:</span><span class="mi">300</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">farmland</span><span class="sh">"</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">cemetery</span><span class="sh">"</span><span class="p">:</span><span class="mi">15</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">construction</span><span class="sh">"</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">meadow</span><span class="sh">"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">farmyard</span><span class="sh">"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">scrub</span><span class="sh">"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">allotments</span><span class="sh">"</span><span class="p">:</span><span class="mi">10</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">reservoir</span><span class="sh">"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">static_caravan</span><span class="sh">"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">commercial</span><span class="sh">"</span><span class="p">:</span><span class="mi">300</span><span class="p">}</span>
        
    <span class="c1"># Create some dummy curves that will match the land-use classes
</span>    <span class="n">curves</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span>
            <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">50</span><span class="p">,</span><span class="mf">0.2</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">100</span><span class="p">,</span><span class="mf">0.4</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">150</span><span class="p">,</span><span class="mf">0.6</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">200</span><span class="p">,</span><span class="mf">0.8</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">250</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>  
    
    <span class="n">curves</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">curves</span><span class="p">,</span>
                                <span class="n">numpy</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">numpy</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="n">curves</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]]</span><span class="o">*</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">maxdam</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)))),</span>
                               <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">curves</span> <span class="o">=</span> <span class="n">pandas</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">curves</span><span class="p">)</span>
    <span class="n">curves</span><span class="p">.</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">depth</span><span class="sh">'</span><span class="p">]</span><span class="o">+</span><span class="nf">list</span><span class="p">(</span><span class="n">maxdam</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>
    <span class="n">curves</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">depth</span><span class="sh">'</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>    

    <span class="c1"># run the VectorScanner and return the landuse map with damage values
</span>    <span class="n">loss_df</span> <span class="o">=</span> <span class="nc">VectorScanner</span><span class="p">(</span><span class="n">landuse</span><span class="p">,</span><span class="n">inun_map</span><span class="p">,</span><span class="n">curves</span><span class="p">,</span><span class="n">maxdam</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="code-data"/><category term="code"/><category term="github"/><summary type="html"><![CDATA[A blog post on how to use and apply it.]]></summary></entry></feed>